package run;


import graph.GraphBuilder;
import graph.Node;
import indexing.MyStandardAnalyzer;

import java.io.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.util.Version;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.SimpleDirectedWeightedGraph;

import util.*;

/**
 *
 * @author isminilourentzou
 */
public class Main {

    HashSet<String> sentences = new HashSet<String>();
    Analyzer analyze = new MyStandardAnalyzer(Version.LUCENE_42);

    /**
     * Generates the csv file for visualizing the graph
     *
     * @param fileName the file that contains the sentences or titles
     * @param distr the topical distributions file from CPLSA
     * @param outfile the filename for the new csv graph file
     * @param topicId the topic cluster we are interested in
     * @param removeEdges whether to remove edges with score lower than the
     * threshold (average) or not
     * @param topK the number of top scored pairs of nodes with their respective
     * edges to save to csv. If topK is set to -1 then we include the whole edge
     * set (independent to removing edges lower than a thershold)
     */
    public SimpleDirectedWeightedGraph doGenerateSummary(String fileName, String distr, String outfile, int topicId, boolean removeEdges, int topK) {
        PrintWriter csv = null;
        GraphBuilder builder = new GraphBuilder();
        SimpleDirectedWeightedGraph g;

        try {
            csv = new PrintWriter(new File(outfile));
            //Create a new empty graph
            //Read the topic model distributions
            ReadDistributions.readFile(distr);
            //Get the topic of interest
            TreeMap<String, Double> topics = ReadDistributions.commonModel.get(topicId);
            HashMap wordNodeMap = null;
            try {
                BufferedReader reader = new BufferedReader(new FileReader(fileName));
                String str;
                int sentenceid = 0;
                while ((str = reader.readLine()) != null) {
                    sentenceid++;
                    str = StringPreprocessing.analyseString(analyze, str);
                    //unfortunatelly the lucene analyzer messes up punctuaction, will be solved later on ...
                    sentences.add(str.toLowerCase() + " ._.");
                    wordNodeMap = builder.growGraph(str, 1, sentenceid, topics);
                }
            } catch (Exception exception) {
                System.err.println(exception.getMessage());
            }
            if (topK != -1) {
                builder.saveRankedEdgeListToCSV(csv, topK);
            } else if (removeEdges) {
                double median = builder.medianGraph();
                builder.saveGraphToCSV(csv, median);
            } else if (topK == -1) {
                builder.saveGraphToCSV(csv);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            csv.close();
        }

        g = builder.getGraph();
        builder.printGraph();//
        return g;
    }
    
    public static void main(String[] args) {
        Main main = new Main();
        String choice = "test/allafrica/titles_allafrica.txt";
        String distr = "test/allafrica/allafrica_ctm_results_titles_4topics.txt";
        String outputFileA = "test/allafrica/forceA.csv";
        String outputFileB = "test/allafrica/forceB.csv";
        int numberOfTopicA = 2;
        int numberOfTopicB = 4;
        
        SimpleDirectedWeightedGraph a = main.doGenerateSummary(choice, distr, outputFileA, numberOfTopicA, true, 100);
       
        System.out.println("Yay! Second graph ----------------------------------------------");
        
        SimpleDirectedWeightedGraph b = main.doGenerateSummary(choice, distr, outputFileB, numberOfTopicB, true, 100);
        
        
//pass parameters, set edges cooccurances, prob|topic, median-
    }
    
    public static void traverse(SimpleDirectedWeightedGraph graph){
    	Set vertexSet = graph.vertexSet();
    	Iterator vIter = vertexSet.iterator();
    	Node v = (Node) vIter.next();
    	Set edges = graph.edgesOf(v);
    	for (Iterator eIter = edges.iterator(); eIter.hasNext();) {
            DefaultWeightedEdge e = (DefaultWeightedEdge) eIter.next();
            String target = ((Node) graph.getEdgeTarget(e)).getNodeName();
            String source = ((Node) graph.getEdgeSource(e)).getNodeName();
            if (!target.equals(v.getNodeName())) {
                System.out.println((new StringBuilder(
                		String.valueOf(v.getNodeName())))
                		.append(":")
                		.append(v.getNodeProb())
                		.append(":")
                		.append(v.getStartNode())
                		.append("->")
                		.append(target)
                		.append(":")
                		.append(((Node) graph.getEdgeTarget(e)).getNodeProb())
                		.append(":")
                		.append(((Node) graph.getEdgeTarget(e)).getStartNode())
                		.append(";")
                		.append(graph.getEdgeWeight(e)).toString());
                //System.out.println(graph.getEdgeWeight(e));
            }
        }
//    	while (vIter.hasNext()) {
//    		Node v = (Node) vIter.next();
//          Set edges = graph.edgesOf(v);
//    	}
    }
}
